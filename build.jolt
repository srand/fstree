from jolt import Test
from jolt.plugins.cmake import CMake
from jolt.plugins import git

import functools
import os
import yaml


@git.influence("third_party/grpc")
class Grpc(CMake):
    cmakelists = "third_party/grpc/CMakeLists.txt"

    options = [
        "CARES_MSVC_STATIC_RUNTIME=ON",
        "gRPC_MSVC_STATIC_RUNTIME=ON",
        "protobuf_MSVC_STATIC_RUNTIME=ON",
    ]

    def publish(self, artifact, tools):
        super().publish(artifact, tools)
        artifact.environ.PATH.append("bin")
        artifact.environ.PKG_CONFIG_PATH.append("lib/pkgconfig")
        artifact.environ.CMAKE_MODULE_PATH.append("lib/cmake")
        artifact.environ.INCPATHS.append("include")
        artifact.environ.LIBPATHS.append("lib")


@git.influence("third_party/googletest")
class GoogleTest(CMake):
    cmakelists = "third_party/googletest/CMakeLists.txt"

    def publish(self, artifact, tools):
        super().publish(artifact, tools)
        artifact.environ.PATH.append("bin")
        artifact.environ.PKG_CONFIG_PATH.append("lib/pkgconfig")
        artifact.environ.CMAKE_MODULE_PATH.append("lib/cmake")
        artifact.environ.INCPATHS.append("include")
        artifact.environ.LIBPATHS.append("lib")


@git.influence("CMakelists.txt")
@git.influence("src")
@git.influence("test")
class Fstree(CMake):
    incremental = True
    requires = ["googletest", "grpc"]

    def run(self, deps, tools):
        path = tools.getenv("CMAKE_MODULE_PATH").replace("\\", "/")
        self.options.append(f"CMAKE_MODULE_PATH={path}")
        super().run(deps, tools)

    def publish(self, artifact, tools):
        super().publish(artifact, tools)
        artifact.environ.PATH.append("bin")


class Tests(Test):
    requires = ["fstree"]

    def create_tree(self, tools, tree):
        # Create the expected tree structure.
        for entry in tree:
            parts = entry.split()
            if parts[0] == "f":
                self.tools.write_file(parts[2])
            elif parts[0] == "d":
                self.tools.mkdir(parts[2])
            elif parts[0] == "l":
                self.tools.symlink(parts[3], parts[2])

            # Set the permissions of the file or directory.
            perms = int(parts[1])
            self.tools.chmod(parts[2], perms)

    def test_unittests(self):
        """
        Run the unittests.
        ---
        """
        self.tools.run("fstree_test")

    @staticmethod
    def runner(func):

        @functools.wraps(func)
        def wrap(self, *args, **kwargs):
            # Split the docstring into two parts, the first part is the
            # description of the test, the second part is the expected
            # tree structure in YAML format.
            doc = func.__doc__.format(*args, **kwargs)
            doc, tree = doc.split("---", 1)

            # Parse the expected tree structure.
            from io import StringIO
            stream = StringIO(tree)
            conf = yaml.safe_load(stream)

            with self.tools.tmpdir(func.__name__) as t, self.tools.cwd(t.path):
                self.tools.mkdir("expected")
                self.tools.mkdir("actual")

                with self.tools.cwd("expected"):
                    self.create_tree(self.tools, conf.get("tree", []))

                with self.tools.cwd("actual"):
                    self.create_tree(self.tools, conf.get("checkout", []))

                # Write the tree
                tree = self.tools.run("fstree write-tree expected")
                self.tools.run("fstree ls-tree {}", tree)

                # Checkout the tree
                self.tools.run("fstree checkout {} actual", tree)

                # Compare the expected tree structure with the actual tree
                if os.name in ["nt"]:
                    self.tools.run("diff.exe -rq --exclude .fstree expected actual")
                else:
                    self.tools.run("diff -rq --exclude .fstree expected actual")

                # Compare trees
                with self.tools.cwd("actual"):
                    self.tools.rmtree(".fstree")
                new_tree = self.tools.run("fstree write-tree actual")
                self.tools.run("fstree ls-tree {}", new_tree)
                self.assertEqual(tree, new_tree)

        return wrap

    @Test.parameterized([
            0o400, 0o440, 0o444, 0o600, 0o640, 0o644,
            0o660, 0o664, 0o666, 0o700, 0o740, 0o744,
            0o750, 0o754, 0o755, 0o760, 0o764, 0o766,
            0o770, 0o774, 0o777
        ] if os.name != "nt" else [0o777, 0o555]
    )
    @runner
    def test_permissions_at_checkout(self):
        """
        Test that permissions of a newly checked out tree matches
        permissions of files and directories of the original tree.
        ---
        tree:
        - d {0} dir
        - f {0} file
        - l {0} link file
        """

    @Test.parameterized([
            0o700, 0o740, 0o744, 0o750, 0o754, 0o755,
            0o760, 0o764, 0o766, 0o770, 0o774, 0o777
        ] if os.name != "nt" else [0o777, 0o555]
    )
    @runner
    def test_dir_permissions_at_checkout(self):
        """
        Test that permissions of a newly checked out tree matches
        permissions of files and directories of the original tree.
        ---
        tree:
        - d {0} dir
        - f {0} dir/file
        - d {0} dir/dir
        - l {0} dir/link file
        """

    @Test.parameterized([
            0o700, 0o740, 0o744, 0o750, 0o754, 0o755,
            0o760, 0o764, 0o766, 0o770, 0o774, 0o777
        ] if os.name != "nt" else [0o777, 0o555]
    )
    @runner
    def test_type_change(self):
        """
        Test that the type of a file or directory can be changed.
        ---
        tree:
        - d {0} dir
        - f {0} file
        - l {0} link file
        - f {0} file2
        - d {0} dir2
        - f {0} dir2/file
        - l {0} dir2/link file
        - f {0} file3
        checkout:
        - f {0} dir
        - d {0} file
        - f {0} link
        - l {0} file2 link
        - f {0} dir2
        - d {0} dir3/file
        - l {0} dir3/link file
        - d {0} dir3/dir
        """

    @Test.parameterized([
            (0o700, 0o700), (0o700, 0o740), (0o700, 0o744),
            (0o700, 0o750), (0o700, 0o754), (0o700, 0o755),
            (0o700, 0o760), (0o700, 0o764), (0o700, 0o766),
            (0o700, 0o770), (0o700, 0o774), (0o700, 0o777),
        ] if os.name != "nt" else [(0o777, 0o555), (0o555, 0o777)])
    @runner
    def test_permissions_change(self):
        """
        Test that the permissions of a file or directory can be changed.
        ---
        tree:
        - d {0} dir
        - f {0} file
        - l {0} link file
        - d {0} dir2
        - f {0} dir2/file
        - l {0} dir2/link file
        - f {0} file2
        - d {0} dir3
        - f {0} dir3/file
        - l {0} dir3/link file
        checkout:
        - d {1} dir
        - f {1} file
        - l {1} link file
        - d {1} dir2
        - f {1} dir2/file
        - l {1} dir2/link file
        - f {1} file2
        - d {1} dir3
        - f {1} dir3/file
        - l {1} dir3/link file
        """